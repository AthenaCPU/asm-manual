\input texinfo
@documentencoding UTF-8
@settitle Athena Assembly Programmer's Manual
@documentlanguage en
@syncodeindex pg cp
@dircategory Software development

@copying
Copyright @copyright{} 2023 d0p1

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License Version 1.3
or any later version published by the Free Software Foundation;
with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
@end quotation
@end copying

@titlepage
@title Athena Assembly Programmer's Manual
@author d0p1
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@node Top
@top Athena Assembly

@menu
* Registers:: describes the format for the general registers.
* Addressing:: describes how addressing works.
* Exceptions:: describes exceptions.
* Instruction Set:: descripbes ISA
* Pseudo Op-Codes:: describes the assembler's pseudo-operations.
* Pseudo Instructions:: describes the assembler's pseudo-instructions.
* Index:: Complete index.
@end menu

@node Registers
@chapter Registers
@cindex chapter, registers

Registers are big endian

@node General Purpose Registers
@section General Purpose Registers
@cindex section, general purpose registers

@multitable @columnfractions .15 .15 .60
@headitem Name @tab Alt-name @tab Use and Linkage
@item r0
@tab zero
@tab Always zero (hardwired)

@item r1 - r8
@tab a0 - a7
@tab Used to pass the first 7 words arguments. Their values are not preserved across procedure call.

@item r9 - r10
@tab v0 - v1
@tab Used for expression evaluations and to hold function results.

@item r11 - r17
@tab s0 - s6
@tab Saved registers; Their values must be preserved across procedure calls.

@item r18 - r24
@tab t0 - t6
@tab Temporary registers; Their values aren't preserved across procedure calls.

@item r25 - r26
@tab k0 - k1
@tab Reserved for the OS kernel

@item r27
@tab at
@tab Reserved for the assembler

@item r28
@tab sp
@tab Contains the stack pointer

@item r29
@tab gp
@tab Contains the global pointer

@item r30
@tab fp
@tab Contains the frame pointer (if needed); itherwise it's a saved registers (like s0-s6)

@item r31
@tab ra
@tab Contains the return address
@end multitable

@node Special Purpose Registers
@section Special Purpose Registers
@cindex section, special purpose registers

@node Addressing
@chapter Addressing

@multitable @columnfractions .50 .50
@headitem Format @tab Address

@item (base register)
@tab TODO

@item expression
@tab TODO

@item expression (base register)
@tab TODO

@item relocatable-symbol
@tab TODO

@end multitable

@node Exceptions
@chapter Exceptions

TODO

@node Instruction Set
@chapter Instruction Set


@node Pseudo Op-Codes
@chapter Pseudo Op-Codes
@cindex chapter, pseudo op-codes

@multitable @columnfractions .15 .35 .50
@headitem Directive @tab Arguments @tab Description
@item @code{.align}
@tab integer
@tab TODO

@item @code{.ascii}
@tab string [,string]...
@tab TODO

@item @code{.asciiz}
@tab string [,string]...
@tab TODO

@item @code{.bss}
@tab 
@tab TODO

@item @code{.byte}
@tab expression [, expression]*
@tab 8-bit comma separated words

@item @code{.data}
@tab 
@tab TODO

@item @code{.dword}
@tab expression [, expression]*
@tab 64-bit comma separated words

@item @code{.extern}
@tab symbol_name
@tab TODO

@item @code{.file}
@tab "filename"
@tab TODO

@item @code{.globl}
@tab symbol_name
@tab TODO

@item @code{.half}
@tab expression [, expression]*
@tab 16-bit comma separated words

@item @code{.local}
@tab symbol_name
@tab TODO

@item @code{.long}
@tab expression [, expression]*
@tab 32-bit comma separated words

@item @code{.rodata}
@tab 
@tab TODO

@item @code{.section}
@tab @{.text,.data,.rodata,.bss@}
@tab TODO

@item @code{.short}
@tab expression [, expression]*
@tab 16-bit comma separated words

@item @code{.size}
@tab name, expression
@tab TODO

@item @code{.text}
@tab 
@tab TODO

@item @code{.word}
@tab expression [, expression]*
@tab 32-bit comma separated words


@end multitable

@node Pseudo Instructions
@chapter Pseudo Instructions
@cindex chapter, pseudo instructions

@multitable @columnfractions .25 .25 .50
@headitem Pseudo Instruction @tab Base Instruction(s) @tab Description
@item @code{b offset}
@tab @code{beq r0, r0, offset}
@tab Unconditional branch

@item @code{beqz ra, offset}
@tab @code{beq ra, r0, offset}
@tab Branch if not zero

@item @code{la rd, label}
@tab  @code{ori rd, r0, label}
@tab  Load address (if address is < 0xFFFF)

@item @code{la rd, label}
@tab  @code{lih at, %hi(label)}
      @*@code{ori rd, at, %low(label)}
@tab Load address into register

@item @code{li rd, imm}
@tab  @code{ori rd, r0, imm}
@tab  Load immediat (if imm is < 0xFFFF)

@item @code{li rd, imm}
@tab  @code{lih at, %hi(imm)}
      @*@code{ori rd, at, %low(imm)}
@tab Load immediat into register


@item @code{nop}
@tab @code{add r0, r0, r0}
@tab No-Op

@item @code{ret}
@tab  @code{TODO}
@tab Subroutine return.

@item @code{swap ra, rb}
@tab @code{xor ra, ra, rb}
     @*@code{xor rb, ra, rb}
     @*@code{xor ra, ra, rb}
@tab XOR swap between two registers

@end multitable

@node GNU Free Documentation License
@appendix GNU Free Documentation License

@include fdl.texi

@node Index
@unnumbered Index
@printindex cp
@bye